{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/EAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport { EMPTY_UID, EIP712Signature } from \"./Types.sol\";\n\n// prettier-ignore\nimport {\n    Attestation,\n    AttestationRequest,\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    IEAS,\n    MultiAttestationRequest,\n    MultiDelegatedAttestationRequest,\n    MultiDelegatedRevocationRequest,\n    MultiRevocationRequest,\n    RevocationRequest,\n    RevocationRequestData\n} from \"./IEAS.sol\";\nimport { ISchemaRegistry, SchemaRecord } from \"./ISchemaRegistry.sol\";\nimport { EIP712Verifier } from \"./EIP712Verifier.sol\";\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\nstruct AttestationsResult {\n    uint256 usedValue; // Total ETH amount that was sent to resolvers.\n    bytes32[] uids; // UIDs of the new attestations.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service\n */\ncontract EAS is IEAS, EIP712Verifier {\n    using Address for address payable;\n\n    error AccessDenied();\n    error AlreadyRevoked();\n    error AlreadyRevokedOffchain();\n    error AlreadyTimestamped();\n    error InsufficientValue();\n    error InvalidAttestation();\n    error InvalidAttestations();\n    error InvalidExpirationTime();\n    error InvalidLength();\n    error InvalidOffset();\n    error InvalidRegistry();\n    error InvalidRevocation();\n    error InvalidRevocations();\n    error InvalidSchema();\n    error InvalidVerifier();\n    error Irrevocable();\n    error NotFound();\n    error NotPayable();\n    error WrongSchema();\n\n    // The version of the contract.\n    string public constant VERSION = \"0.26\";\n\n    // A zero expiration represents an non-expiring attestation.\n    uint64 private constant NO_EXPIRATION_TIME = 0;\n\n    // The global schema registry.\n    ISchemaRegistry private immutable _schemaRegistry;\n\n    // The global mapping between attestations and their UIDs.\n    mapping(bytes32 uid => Attestation attestation) private _db;\n\n    // The global mapping between data and their timestamps.\n    mapping(bytes32 data => uint64 timestamp) private _timestamps;\n\n    // The global mapping between data and their revocation timestamps.\n    mapping(address revoker => mapping(bytes32 data => uint64 timestamp)) private _revocationsOffchain;\n\n    /**\n     * @dev Creates a new EAS instance.\n     *\n     * @param registry The address of the global schema registry.\n     */\n    constructor(ISchemaRegistry registry) EIP712Verifier(VERSION) {\n        if (address(registry) == address(0)) {\n            revert InvalidRegistry();\n        }\n\n        _schemaRegistry = registry;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry) {\n        return _schemaRegistry;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function attest(AttestationRequest calldata request) public payable virtual returns (bytes32) {\n        AttestationRequestData[] memory requests = new AttestationRequestData[](1);\n        requests[0] = request.data;\n\n        return _attest(request.schema, requests, msg.sender, msg.value, true).uids[0];\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) public payable virtual returns (bytes32) {\n        _verifyAttest(delegatedRequest);\n\n        AttestationRequestData[] memory data = new AttestationRequestData[](1);\n        data[0] = delegatedRequest.data;\n\n        return _attest(delegatedRequest.schema, data, delegatedRequest.attester, msg.value, true).uids[0];\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory) {\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\n        // all the returned UIDs into a single list.\n        bytes32[][] memory totalUids = new bytes32[][](multiRequests.length);\n        uint256 totalUidsCount = 0;\n\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint availableValue = msg.value;\n\n        for (uint256 i = 0; i < multiRequests.length; ) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == multiRequests.length - 1;\n            }\n\n            // Process the current batch of attestations.\n            MultiAttestationRequest calldata multiRequest = multiRequests[i];\n            AttestationsResult memory res = _attest(\n                multiRequest.schema,\n                multiRequest.data,\n                msg.sender,\n                availableValue,\n                last\n            );\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= res.usedValue;\n\n            // Collect UIDs (and merge them later).\n            totalUids[i] = res.uids;\n            unchecked {\n                totalUidsCount += res.uids.length;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Merge all the collected UIDs and return them as a flatten array.\n        return _mergeUIDs(totalUids, totalUidsCount);\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory) {\n        // Since a multi-attest call is going to make multiple attestations for multiple schemas, we'd need to collect\n        // all the returned UIDs into a single list.\n        bytes32[][] memory totalUids = new bytes32[][](multiDelegatedRequests.length);\n        uint256 totalUidsCount = 0;\n\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint availableValue = msg.value;\n\n        for (uint256 i = 0; i < multiDelegatedRequests.length; ) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == multiDelegatedRequests.length - 1;\n            }\n\n            MultiDelegatedAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            if (data.length == 0 || data.length != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\n            for (uint256 j = 0; j < data.length; ) {\n                _verifyAttest(\n                    DelegatedAttestationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        attester: multiDelegatedRequest.attester\n                    })\n                );\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            // Process the current batch of attestations.\n            AttestationsResult memory res = _attest(\n                multiDelegatedRequest.schema,\n                data,\n                multiDelegatedRequest.attester,\n                availableValue,\n                last\n            );\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= res.usedValue;\n\n            // Collect UIDs (and merge them later).\n            totalUids[i] = res.uids;\n            unchecked {\n                totalUidsCount += res.uids.length;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Merge all the collected UIDs and return them as a flatten array.\n        return _mergeUIDs(totalUids, totalUidsCount);\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function revoke(RevocationRequest calldata request) public payable virtual {\n        RevocationRequestData[] memory requests = new RevocationRequestData[](1);\n        requests[0] = request.data;\n\n        _revoke(request.schema, requests, msg.sender, msg.value, true);\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) public payable virtual {\n        _verifyRevoke(delegatedRequest);\n\n        RevocationRequestData[] memory data = new RevocationRequestData[](1);\n        data[0] = delegatedRequest.data;\n\n        _revoke(delegatedRequest.schema, data, delegatedRequest.revoker, msg.value, true);\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable {\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint availableValue = msg.value;\n\n        for (uint256 i = 0; i < multiRequests.length; ) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == multiRequests.length - 1;\n            }\n\n            MultiRevocationRequest calldata multiRequest = multiRequests[i];\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= _revoke(multiRequest.schema, multiRequest.data, msg.sender, availableValue, last);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable {\n        // We are keeping track of the total available ETH amount that can be sent to resolvers and will keep deducting\n        // from it to verify that there isn't any attempt to send too much ETH to resolvers. Please note that unless\n        // some ETH was stuck in the contract by accident (which shouldn't happen in normal conditions), it won't be\n        // possible to send too much ETH anyway.\n        uint availableValue = msg.value;\n\n        for (uint256 i = 0; i < multiDelegatedRequests.length; ) {\n            // The last batch is handled slightly differently: if the total available ETH wasn't spent in full and there\n            // is a remainder - it will be refunded back to the attester (something that we can only verify during the\n            // last and final batch).\n            bool last;\n            unchecked {\n                last = i == multiDelegatedRequests.length - 1;\n            }\n\n            MultiDelegatedRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            if (data.length == 0 || data.length != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\n            for (uint256 j = 0; j < data.length; ) {\n                _verifyRevoke(\n                    DelegatedRevocationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        revoker: multiDelegatedRequest.revoker\n                    })\n                );\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            // Ensure to deduct the ETH that was forwarded to the resolver during the processing of this batch.\n            availableValue -= _revoke(\n                multiDelegatedRequest.schema,\n                data,\n                multiDelegatedRequest.revoker,\n                availableValue,\n                last\n            );\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function timestamp(bytes32 data) external returns (uint64) {\n        uint64 time = _time();\n\n        _timestamp(data, time);\n\n        return time;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64) {\n        uint64 time = _time();\n\n        _revokeOffchain(msg.sender, data, time);\n\n        return time;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64) {\n        uint64 time = _time();\n\n        uint256 length = data.length;\n        for (uint256 i = 0; i < length; ) {\n            _revokeOffchain(msg.sender, data[i], time);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64) {\n        uint64 time = _time();\n\n        uint256 length = data.length;\n        for (uint256 i = 0; i < length; ) {\n            _timestamp(data[i], time);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return time;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory) {\n        return _db[uid];\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function isAttestationValid(bytes32 uid) public view returns (bool) {\n        return _db[uid].uid != 0;\n    }\n\n    /**\n     * @inheritdoc IEAS\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64) {\n        return _timestamps[data];\n    }\n\n    /**\n      * @inheritdoc IEAS\n      */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64) {\n        return _revocationsOffchain[revoker][data];\n    }\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param schema // the unique identifier of the schema to attest to.\n     * @param data The arguments of the attestation requests.\n     * @param attester The attesting account.\n     * @param availableValue The total available ETH amount that can be sent to the resolver.\n     * @param last Whether this is the last attestations/revocations set.\n     *\n     * @return The UID of the new attestations and the total sent ETH amount.\n     */\n    function _attest(\n        bytes32 schema,\n        AttestationRequestData[] memory data,\n        address attester,\n        uint256 availableValue,\n        bool last\n    ) private returns (AttestationsResult memory) {\n        uint256 length = data.length;\n\n        AttestationsResult memory res;\n        res.uids = new bytes32[](length);\n\n        // Ensure that we aren't attempting to attest to a non-existing schema.\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schema);\n        if (schemaRecord.uid == EMPTY_UID) {\n            revert InvalidSchema();\n        }\n\n        Attestation[] memory attestations = new Attestation[](length);\n        uint256[] memory values = new uint256[](length);\n\n        for (uint256 i = 0; i < length; ) {\n            AttestationRequestData memory request = data[i];\n\n            // Ensure that either no expiration time was set or that it was set in the future.\n            if (request.expirationTime != NO_EXPIRATION_TIME && request.expirationTime <= _time()) {\n                revert InvalidExpirationTime();\n            }\n\n            // Ensure that we aren't trying to make a revocable attestation for a non-revocable schema.\n            if (!schemaRecord.revocable && request.revocable) {\n                revert Irrevocable();\n            }\n\n            Attestation memory attestation = Attestation({\n                uid: EMPTY_UID,\n                schema: schema,\n                refUID: request.refUID,\n                time: _time(),\n                expirationTime: request.expirationTime,\n                revocationTime: 0,\n                recipient: request.recipient,\n                attester: attester,\n                revocable: request.revocable,\n                data: request.data\n            });\n\n            // Look for the first non-existing UID (and use a bump seed/nonce in the rare case of a conflict).\n            bytes32 uid;\n            uint32 bump = 0;\n            while (true) {\n                uid = _getUID(attestation, bump);\n                if (_db[uid].uid == EMPTY_UID) {\n                    break;\n                }\n\n                unchecked {\n                    ++bump;\n                }\n            }\n            attestation.uid = uid;\n\n            _db[uid] = attestation;\n\n            if (request.refUID != 0) {\n                // Ensure that we aren't trying to attest to a non-existing referenced UID.\n                if (!isAttestationValid(request.refUID)) {\n                    revert NotFound();\n                }\n            }\n\n            attestations[i] = attestation;\n            values[i] = request.value;\n\n            res.uids[i] = uid;\n\n            emit Attested(request.recipient, attester, uid, schema);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        res.usedValue = _resolveAttestations(schemaRecord, attestations, values, false, availableValue, last);\n\n        return res;\n    }\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * @param schema The unique identifier of the schema to attest to.\n     * @param data The arguments of the revocation requests.\n     * @param revoker The revoking account.\n     * @param availableValue The total available ETH amount that can be sent to the resolver.\n     * @param last Whether this is the last attestations/revocations set.\n     *\n     * @return Returns the total sent ETH amount.\n     */\n    function _revoke(\n        bytes32 schema,\n        RevocationRequestData[] memory data,\n        address revoker,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        // Ensure that a non-existing schema ID wasn't passed by accident.\n        SchemaRecord memory schemaRecord = _schemaRegistry.getSchema(schema);\n        if (schemaRecord.uid == EMPTY_UID) {\n            revert InvalidSchema();\n        }\n\n        uint256 length = data.length;\n        Attestation[] memory attestations = new Attestation[](length);\n        uint256[] memory values = new uint256[](length);\n\n        for (uint256 i = 0; i < length; ) {\n            RevocationRequestData memory request = data[i];\n\n            Attestation storage attestation = _db[request.uid];\n\n            // Ensure that we aren't attempting to revoke a non-existing attestation.\n            if (attestation.uid == EMPTY_UID) {\n                revert NotFound();\n            }\n\n            // Ensure that a wrong schema ID wasn't passed by accident.\n            if (attestation.schema != schema) {\n                revert InvalidSchema();\n            }\n\n            // Allow only original attesters to revoke their attestations.\n            if (attestation.attester != revoker) {\n                revert AccessDenied();\n            }\n\n            // Please note that also checking of the schema itself is revocable is unnecessary, since it's not possible to\n            // make revocable attestations to an irrevocable schema.\n            if (!attestation.revocable) {\n                revert Irrevocable();\n            }\n\n            // Ensure that we aren't trying to revoke the same attestation twice.\n            if (attestation.revocationTime != 0) {\n                revert AlreadyRevoked();\n            }\n            attestation.revocationTime = _time();\n\n            attestations[i] = attestation;\n            values[i] = request.value;\n\n            emit Revoked(attestation.recipient, revoker, request.uid, attestation.schema);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return _resolveAttestations(schemaRecord, attestations, values, true, availableValue, last);\n    }\n\n    /**\n     * @dev Resolves a new attestation or a revocation of an existing attestation.\n     *\n     * @param schemaRecord The schema of the attestation.\n     * @param attestation The data of the attestation to make/revoke.\n     * @param value An explicit ETH amount to send to the resolver.\n     * @param isRevocation Whether to resolve an attestation or its revocation.\n     * @param availableValue The total available ETH amount that can be sent to the resolver.\n     * @param last Whether this is the last attestations/revocations set.\n     *\n     * @return Returns the total sent ETH amount.\n     */\n    function _resolveAttestation(\n        SchemaRecord memory schemaRecord,\n        Attestation memory attestation,\n        uint256 value,\n        bool isRevocation,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        ISchemaResolver resolver = schemaRecord.resolver;\n        if (address(resolver) == address(0)) {\n            // Ensure that we don't accept payments if there is no resolver.\n            if (value != 0) {\n                revert NotPayable();\n            }\n\n            return 0;\n        }\n\n        // Ensure that we don't accept payments which can't be forwarded to the resolver.\n        if (value != 0 && !resolver.isPayable()) {\n            revert NotPayable();\n        }\n\n        // Ensure that the attester/revoker doesn't try to spend more than available.\n        if (value > availableValue) {\n            revert InsufficientValue();\n        }\n\n        // Ensure to deduct the sent value explicitly.\n        unchecked {\n            availableValue -= value;\n        }\n\n        if (isRevocation) {\n            if (!resolver.revoke{ value: value }(attestation)) {\n                revert InvalidRevocation();\n            }\n        } else if (!resolver.attest{ value: value }(attestation)) {\n            revert InvalidAttestation();\n        }\n\n        if (last) {\n            _refund(availableValue);\n        }\n\n        return value;\n    }\n\n    /**\n     * @dev Resolves multiple attestations or revocations of existing attestations.\n     *\n     * @param schemaRecord The schema of the attestation.\n     * @param attestations The data of the attestations to make/revoke.\n     * @param values Explicit ETH amounts to send to the resolver.\n     * @param isRevocation Whether to resolve an attestation or its revocation.\n     * @param availableValue The total available ETH amount that can be sent to the resolver.\n     * @param last Whether this is the last attestations/revocations set.\n     *\n     * @return Returns the total sent ETH amount.\n     */\n    function _resolveAttestations(\n        SchemaRecord memory schemaRecord,\n        Attestation[] memory attestations,\n        uint256[] memory values,\n        bool isRevocation,\n        uint256 availableValue,\n        bool last\n    ) private returns (uint256) {\n        uint256 length = attestations.length;\n        if (length == 1) {\n            return _resolveAttestation(schemaRecord, attestations[0], values[0], isRevocation, availableValue, last);\n        }\n\n        ISchemaResolver resolver = schemaRecord.resolver;\n        if (address(resolver) == address(0)) {\n            // Ensure that we don't accept payments if there is no resolver.\n            for (uint256 i = 0; i < length; ) {\n                if (values[i] != 0) {\n                    revert NotPayable();\n                }\n\n                unchecked {\n                    ++i;\n                }\n            }\n\n            return 0;\n        }\n\n        uint256 totalUsedValue = 0;\n\n        for (uint256 i = 0; i < length; ) {\n            uint256 value = values[i];\n\n            // Ensure that we don't accept payments which can't be forwarded to the resolver.\n            if (value != 0 && !resolver.isPayable()) {\n                revert NotPayable();\n            }\n\n            // Ensure that the attester/revoker doesn't try to spend more than available.\n            if (value > availableValue) {\n                revert InsufficientValue();\n            }\n\n            // Ensure to deduct the sent value explicitly and add it to the total used value by the batch.\n            unchecked {\n                availableValue -= value;\n                totalUsedValue += value;\n\n                ++i;\n            }\n        }\n\n        if (isRevocation) {\n            if (!resolver.multiRevoke{ value: totalUsedValue }(attestations, values)) {\n                revert InvalidRevocations();\n            }\n        } else if (!resolver.multiAttest{ value: totalUsedValue }(attestations, values)) {\n            revert InvalidAttestations();\n        }\n\n        if (last) {\n            _refund(availableValue);\n        }\n\n        return totalUsedValue;\n    }\n\n    /**\n     * @dev Calculates a UID for a given attestation.\n     *\n     * @param attestation The input attestation.\n     * @param bump A bump value to use in case of a UID conflict.\n     *\n     * @return Attestation UID.\n     */\n    function _getUID(Attestation memory attestation, uint32 bump) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    attestation.schema,\n                    attestation.recipient,\n                    attestation.attester,\n                    attestation.time,\n                    attestation.expirationTime,\n                    attestation.revocable,\n                    attestation.refUID,\n                    attestation.data,\n                    bump\n                )\n            );\n    }\n\n    /**\n     * @dev Refunds remaining ETH amount to the attester.\n     *\n     * @param remainingValue The remaining ETH amount that was not sent to the resolver.\n     */\n    function _refund(uint256 remainingValue) private {\n        if (remainingValue > 0) {\n            // Using a regular transfer here might revert, for some non-EOA attesters, due to exceeding of the 2300\n            // gas limit which is why we're using call instead (via sendValue), which the 2300 gas limit does not\n            // apply for.\n            payable(msg.sender).sendValue(remainingValue);\n        }\n    }\n\n    /**\n     * @dev Merges lists of UIDs.\n     *\n     * @param uidLists The provided lists of UIDs.\n     * @param uidsCount Total UIDs count.\n     *\n     * @return A merged and flatten list of all the UIDs.\n     */\n    function _mergeUIDs(bytes32[][] memory uidLists, uint256 uidsCount) private pure returns (bytes32[] memory) {\n        bytes32[] memory uids = new bytes32[](uidsCount);\n\n        uint256 currentIndex = 0;\n        for (uint256 i = 0; i < uidLists.length; ) {\n            bytes32[] memory currentUids = uidLists[i];\n            for (uint256 j = 0; j < currentUids.length; ) {\n                uids[currentIndex] = currentUids[j];\n\n                unchecked {\n                    ++j;\n                    ++currentIndex;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        return uids;\n    }\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     * @param time The timestamp.\n     */\n    function _timestamp(bytes32 data, uint64 time) private {\n        if (_timestamps[data] != 0) {\n            revert AlreadyTimestamped();\n        }\n\n        _timestamps[data] = time;\n\n        emit Timestamped(data, time);\n    }\n\n    /**\n         * @dev Timestamps the specified bytes32 data.\n         *\n         * @param data The data to timestamp.\n         * @param time The timestamp.\n         */\n    function _revokeOffchain(address revoker, bytes32 data, uint64 time) private {\n        mapping(bytes32 data => uint64 timestamp) storage revocations = _revocationsOffchain[revoker];\n\n\n        if (revocations[data] != 0) {\n            revert AlreadyRevokedOffchain();\n        }\n\n        revocations[data] = time;\n\n        emit RevokedOffchain(revoker, data, time);\n    }\n\n    /**\n     * @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\n     * current block time.\n     */\n    function _time() internal view virtual returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "contracts/EIP712Verifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// prettier-ignore\nimport {\n    AttestationRequest,\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    RevocationRequest,\n    RevocationRequestData\n} from \"./IEAS.sol\";\n\nimport { EIP712Signature } from \"./Types.sol\";\n\n/**\n * @title EIP712 typed signatures verifier for EAS delegated attestations.\n */\nabstract contract EIP712Verifier is EIP712 {\n    error InvalidSignature();\n\n    // The hash of the data type used to relay calls to the attest function. It's the value of\n    // keccak256(\"Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 nonce)\").\n    bytes32 private constant ATTEST_TYPEHASH = 0xdbfdf8dc2b135c26253e00d5b6cbe6f20457e003fd526d97cea183883570de61;\n\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\n    // keccak256(\"Revoke(bytes32 schema,bytes32 uid,uint256 nonce)\").\n    bytes32 private constant REVOKE_TYPEHASH = 0xa98d02348410c9c76735e0d0bb1396f4015ac2bb9615f9c2611d19d7a8a99650;\n\n    // Replay protection nonces.\n    mapping(address => uint256) private _nonces;\n\n    /**\n     * @dev Creates a new EIP712Verifier instance.\n     *\n     * @param version The current major version of the signing domain\n     */\n    constructor(string memory version) EIP712(\"EAS\", version) {}\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signatures for attest, and revoke.\n     */\n    function getDomainSeparator() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev Returns the current nonce per-account.\n     *\n     * @param account The requested account.\n     *\n     * @return The current nonce.\n     */\n    function getNonce(address account) external view returns (uint256) {\n        return _nonces[account];\n    }\n\n    /**\n     * Returns the EIP712 type hash for the attest function.\n     */\n    function getAttestTypeHash() external pure returns (bytes32) {\n        return ATTEST_TYPEHASH;\n    }\n\n    /**\n     * Returns the EIP712 type hash for the revoke function.\n     */\n    function getRevokeTypeHash() external pure returns (bytes32) {\n        return REVOKE_TYPEHASH;\n    }\n\n    /**\n     * @dev Verifies delegated attestation request.\n     *\n     * @param request The arguments of the delegated attestation request.\n     */\n    function _verifyAttest(DelegatedAttestationRequest memory request) internal {\n        AttestationRequestData memory data = request.data;\n        EIP712Signature memory signature = request.signature;\n\n        uint256 nonce;\n        unchecked {\n            nonce = _nonces[request.attester]++;\n        }\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    ATTEST_TYPEHASH,\n                    request.schema,\n                    data.recipient,\n                    data.expirationTime,\n                    data.revocable,\n                    data.refUID,\n                    keccak256(data.data),\n                    nonce\n                )\n            )\n        );\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.attester) {\n            revert InvalidSignature();\n        }\n    }\n\n    /**\n     * @dev Verifies delegated revocation request.\n     *\n     * @param request The arguments of the delegated revocation request.\n     */\n    function _verifyRevoke(DelegatedRevocationRequest memory request) internal {\n        RevocationRequestData memory data = request.data;\n        EIP712Signature memory signature = request.signature;\n\n        uint256 nonce;\n        unchecked {\n            nonce = _nonces[request.revoker]++;\n        }\n\n        bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(REVOKE_TYPEHASH, request.schema, data.uid, nonce)));\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.revoker) {\n            revert InvalidSignature();\n        }\n    }\n}\n"
    },
    "contracts/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { Attestation, EIP712Signature } from \"./Types.sol\";\n\n/**\n * @dev A struct representing the arguments of the attestation request.\n */\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the attestation request.\n */\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi attestation request.\n */\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the arguments of the revocation request.\n */\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the revocation request.\n */\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi revocation request.\n */\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service interface.\n */\ninterface IEAS {\n    /**\n     * @dev Emitted when an attestation has been made.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param uid The UID the revoked attestation.\n     * @param schema The UID of the schema.\n     */\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when an attestation has been revoked.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param schema The UID of the schema.\n     * @param uid The UID the revoked attestation.\n     */\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when a data has been timestamped.\n     *\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Emitted when a data has been revoked.\n     *\n     * @param revoker The address of the revoker.\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Returns the address of the global schema registry.\n     *\n     * @return The address of the global schema registry.\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param request The arguments of the attestation request.\n     *\n     * Example:\n     *\n     * attest({\n     *     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     *     data: {\n     *         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *         data: \"0xF00D\",\n     *         value: 0\n     *     }\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttest([{\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 1000\n     *     },\n     *     {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n     *         data: '0x12345678',\n     *         value: 0\n     *     },\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * Example:\n     *\n     * revoke({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n     *         value: 0\n     *     }\n     * })\n     *\n     * @param request The arguments of the revocation request.\n     */\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevoke([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n     *         value: 0\n     *     },\n     * }])\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Timestamps the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Returns an existing attestation by UID.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return The attestation data members.\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /**\n     * @dev Checks whether an attestation exists.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return Whether an attestation exists.\n     */\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"
    },
    "contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/**\n * @title A struct representing a record for a submitted schema.\n */\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/**\n * @title The global schema registry interface.\n */\ninterface ISchemaRegistry {\n    /**\n     * @dev Emitted when a new schema has been registered\n     *\n     * @param uid The schema UID.\n     * @param registerer The address of the account used to register the schema.\n     */\n    event Registered(bytes32 indexed uid, address registerer);\n\n    /**\n     * @dev Submits and reserves a new schema\n     *\n     * @param schema The schema data schema.\n     * @param resolver An optional schema resolver.\n     * @param revocable Whether the schema allows revocations explicitly.\n     *\n     * @return The UID of the new schema.\n     */\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /**\n     * @dev Returns an existing schema by UID\n     *\n     * @param uid The UID of the schema to retrieve.\n     *\n     * @return The schema data members.\n     */\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Attestation } from \"../Types.sol\";\n\n/**\n * @title The interface of an optional schema resolver.\n */\ninterface ISchemaResolver {\n    /**\n     * @dev Returns whether the resolver supports ETH transfers.\n     */\n    function isPayable() external pure returns (bool);\n\n    /**\n     * @dev Processes an attestation and verifies whether it's valid.\n     *\n     * @param attestation The new attestation.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes multiple attestations and verifies whether they are valid.\n     *\n     * @param attestations The new attestations.\n     * @param values Explicit ETH amounts which were sent with each attestation.\n     *\n     * @return Whether all the attestations are valid.\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\n     *\n     * @param attestations The existing attestations to be revoked.\n     * @param values Explicit ETH amounts which were sent with each revocation.\n     *\n     * @return Whether the attestations can be revoked.\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/tests/TestEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { EAS } from \"../EAS.sol\";\n\nimport { ISchemaRegistry } from \"../ISchemaRegistry.sol\";\n\ncontract TestEAS is EAS {\n    uint64 private constant INITIAL_TIME = 0;\n\n    uint64 private _currentTime = INITIAL_TIME;\n\n    constructor(ISchemaRegistry registry) EAS(registry) {}\n\n    function setTime(uint64 newTime) external {\n        _currentTime = newTime;\n    }\n\n    function getTime() external view returns (uint64) {\n        return _time();\n    }\n\n    function _time() internal view virtual override returns (uint64) {\n        return _currentTime == INITIAL_TIME ? super._time() : _currentTime;\n    }\n}\n"
    },
    "contracts/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n/**\n * @dev A struct representing EIP712 signature data.\n */\nstruct EIP712Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/**\n * @dev A struct representing a single attestation.\n */\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    }
  }
}
