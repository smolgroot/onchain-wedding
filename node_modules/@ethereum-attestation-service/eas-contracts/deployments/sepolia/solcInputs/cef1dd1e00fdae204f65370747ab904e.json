{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/**\n * @dev A struct representing EIP712 signature data.\n */\nstruct EIP712Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/**\n * @dev A struct representing a single attestation.\n */\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n"
    },
    "contracts/eip712/proxy/EIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// prettier-ignore\nimport {\n    AccessDenied,\n    EIP712Signature,\n    InvalidEAS,\n    InvalidLength,\n    InvalidSignature,\n    NotFound,\n    NO_EXPIRATION_TIME\n} from \"../../Common.sol\";\n\n// prettier-ignore\nimport {\n    AttestationRequest,\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    IEAS,\n    MultiAttestationRequest,\n    MultiDelegatedAttestationRequest,\n    MultiDelegatedRevocationRequest,\n    MultiRevocationRequest,\n    RevocationRequest,\n    RevocationRequestData\n} from \"../../IEAS.sol\";\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedProxyAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedProxyAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedProxyRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedProxyRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/**\n * @title This utility contract an be used to aggregate delegated attestations without requiring a specific order via\n * nonces. The contract doesn't request nonces and implements replay protection by storing ***immalleable*** signatures.\n */\ncontract EIP712Proxy is EIP712 {\n    error DeadlineExpired();\n    error UsedSignature();\n\n    // The version of the contract.\n    string public constant VERSION = \"0.1\";\n\n    // The hash of the data type used to relay calls to the attest function. It's the value of\n    // keccak256(\"Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint64 deadline)\").\n    bytes32 private constant ATTEST_PROXY_TYPEHASH = 0x4120d3b28306666b714826ad7cb70744d9658ad3e6cd873411bedadcf55afda7;\n\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\n    // keccak256(\"Revoke(bytes32 schema,bytes32 uid,uint64 deadline)\").\n    bytes32 private constant REVOKE_PROXY_TYPEHASH = 0x96bdbea8fa280f8a0d0835587e1fbb1470e81d05c44514158443340cea40a05d;\n\n    // The global EAS contract.\n    IEAS private immutable _eas;\n\n    // The user readable name of the signing domain.\n    string private _name;\n\n    // The global mapping between proxy attestations and their attesters, so that we can verify that only the original\n    // attester is able to revert attestations by proxy.\n    mapping(bytes32 uid => address attester) private _attesters;\n\n    // Replay protection signatures.\n    mapping(bytes signature => bool used) private _signatures;\n\n    /**\n     * @dev Creates a new EIP712Verifier instance.\n     *\n     * @param eas The address of the global EAS contract.\n     * @param name The user readable name of the signing domain.\n     */\n    constructor(IEAS eas, string memory name) EIP712(name, VERSION) {\n        if (address(eas) == address(0)) {\n            revert InvalidEAS();\n        }\n\n        _eas = eas;\n        _name = name;\n    }\n\n     /**\n     * @dev Returns the EAS.\n     */\n    function getEAS() external view returns (IEAS) {\n        return _eas;\n    }\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signatures for attest, and revoke.\n     */\n    function getDomainSeparator() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * Returns the EIP712 type hash for the attest function.\n     */\n    function getAttestTypeHash() external pure returns (bytes32) {\n        return ATTEST_PROXY_TYPEHASH;\n    }\n\n    /**\n     * Returns the EIP712 type hash for the revoke function.\n     */\n    function getRevokeTypeHash() external pure returns (bytes32) {\n        return REVOKE_PROXY_TYPEHASH;\n    }\n\n    /**\n     * Returns the EIP712 name.\n     */\n    function getName() external view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * Returns the attester for a given uid.\n     */\n    function getAttester(bytes32 uid) external view returns (address) {\n        return _attesters[uid];\n    }\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedProxyAttestationRequest calldata delegatedRequest\n    ) public payable virtual returns (bytes32) {\n        _verifyAttest(delegatedRequest);\n\n        bytes32 uid = _eas.attest{ value: msg.value }(\n            AttestationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\n        );\n\n        _attesters[uid] = delegatedRequest.attester;\n\n        return uid;\n    }\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\n    ) public payable virtual returns (bytes32[] memory) {\n        MultiAttestationRequest[] memory multiRequests = new MultiAttestationRequest[](multiDelegatedRequests.length);\n\n        for (uint256 i = 0; i < multiDelegatedRequests.length; ) {\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            if (data.length == 0 || data.length != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\n            for (uint256 j = 0; j < data.length; ) {\n                _verifyAttest(\n                    DelegatedProxyAttestationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        attester: multiDelegatedRequest.attester,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            multiRequests[i] = MultiAttestationRequest({ schema: multiDelegatedRequest.schema, data: data });\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        bytes32[] memory uids = _eas.multiAttest{ value: msg.value }(multiRequests);\n\n        // Store all attesters, according to the order of the attestation requests.\n        uint256 uidCounter = 0;\n\n        for (uint256 i = 0; i < multiDelegatedRequests.length; ) {\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest = multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            for (uint256 j = 0; j < data.length; ) {\n                _attesters[uids[uidCounter]] = multiDelegatedRequest.attester;\n\n                unchecked {\n                    ++uidCounter;\n\n                    ++j;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return uids;\n    }\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest) public payable virtual {\n        _verifyRevoke(delegatedRequest);\n\n        return\n            _eas.revoke{ value: msg.value }(\n                RevocationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\n            );\n    }\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\n    ) public payable virtual {\n        MultiRevocationRequest[] memory multiRequests = new MultiRevocationRequest[](multiDelegatedRequests.length);\n\n        for (uint256 i = 0; i < multiDelegatedRequests.length; ) {\n            MultiDelegatedProxyRevocationRequest memory multiDelegatedRequest = multiDelegatedRequests[i];\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            if (data.length == 0 || data.length != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed with increasing nonces.\n            for (uint256 j = 0; j < data.length; ) {\n                RevocationRequestData memory requestData = data[j];\n\n                _verifyRevoke(\n                    DelegatedProxyRevocationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: requestData,\n                        signature: multiDelegatedRequest.signatures[j],\n                        revoker: multiDelegatedRequest.revoker,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n\n                unchecked {\n                    ++j;\n                }\n            }\n\n            multiRequests[i] = MultiRevocationRequest({ schema: multiDelegatedRequest.schema, data: data });\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        _eas.multiRevoke{ value: msg.value }(multiRequests);\n    }\n\n    /**\n     * @dev Verifies delegated attestation request.\n     *\n     * @param request The arguments of the delegated attestation request.\n     */\n    function _verifyAttest(DelegatedProxyAttestationRequest memory request) internal {\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline <= _time()) {\n            revert DeadlineExpired();\n        }\n\n        AttestationRequestData memory data = request.data;\n        EIP712Signature memory signature = request.signature;\n\n        _verifyUnusedSignature(signature);\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    ATTEST_PROXY_TYPEHASH,\n                    request.schema,\n                    data.recipient,\n                    data.expirationTime,\n                    data.revocable,\n                    data.refUID,\n                    keccak256(data.data),\n                    request.deadline\n                )\n            )\n        );\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.attester) {\n            revert InvalidSignature();\n        }\n    }\n\n    /**\n     * @dev Verifies delegated revocation request.\n     *\n     * @param request The arguments of the delegated revocation request.\n     */\n    function _verifyRevoke(DelegatedProxyRevocationRequest memory request) internal {\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline <= _time()) {\n            revert DeadlineExpired();\n        }\n\n        RevocationRequestData memory data = request.data;\n\n        // Allow only original attesters to revoke their attestations.\n        address attester = _attesters[data.uid];\n        if (attester == address(0)) {\n            revert NotFound();\n        }\n\n        if (attester != msg.sender) {\n            revert AccessDenied();\n        }\n\n        EIP712Signature memory signature = request.signature;\n\n        _verifyUnusedSignature(signature);\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(abi.encode(REVOKE_PROXY_TYPEHASH, request.schema, data.uid, request.deadline))\n        );\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.revoker) {\n            revert InvalidSignature();\n        }\n    }\n\n    /**\n     * @dev Ensures that the provided EIP712 signature wasn't already used.\n     *\n     * @param signature The EIP712 signature data.\n     */\n    function _verifyUnusedSignature(EIP712Signature memory signature) internal {\n        bytes memory packedSignature = abi.encodePacked(signature.v, signature.r, signature.s);\n\n        if (_signatures[packedSignature]) {\n            revert UsedSignature();\n        }\n\n        _signatures[packedSignature] = true;\n    }\n\n    /**\n     * @dev Returns the current's block timestamp. This method is overridden during tests and used to simulate the\n     * current block time.\n     */\n    function _time() internal view virtual returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "contracts/eip712/proxy/examples/PermissionedEIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// prettier-ignore\nimport {\n    EIP712Proxy,\n    DelegatedProxyAttestationRequest,\n    DelegatedProxyRevocationRequest,\n    MultiDelegatedProxyAttestationRequest,\n    MultiDelegatedProxyRevocationRequest\n} from \"../EIP712Proxy.sol\";\n\nimport { IEAS } from \"../../../IEAS.sol\";\n\n/**\n * @title A sample EIP712 proxy that allows only a specific address to attest.\n */\ncontract PermissionedEIP712Proxy is EIP712Proxy, Ownable {\n    constructor(IEAS eas, string memory name) EIP712Proxy(eas, name) {}\n\n    /**\n     * @inheritdoc EIP712Proxy\n     */\n    function attestByDelegation(\n        DelegatedProxyAttestationRequest calldata delegatedRequest\n    ) public payable override onlyOwner returns (bytes32) {\n        return super.attestByDelegation(delegatedRequest);\n    }\n\n    /**\n     * @inheritdoc EIP712Proxy\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\n    ) public payable override onlyOwner returns (bytes32[] memory) {\n        return super.multiAttestByDelegation(multiDelegatedRequests);\n    }\n\n    /**\n     * @inheritdoc EIP712Proxy\n     */\n    function revokeByDelegation(\n        DelegatedProxyRevocationRequest calldata delegatedRequest\n    ) public payable override onlyOwner {\n        super.revokeByDelegation(delegatedRequest);\n    }\n\n    /**\n     * @inheritdoc EIP712Proxy\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\n    ) public payable override onlyOwner {\n        super.multiRevokeByDelegation(multiDelegatedRequests);\n    }\n}\n"
    },
    "contracts/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { Attestation, EIP712Signature } from \"./Common.sol\";\n\n/**\n * @dev A struct representing the arguments of the attestation request.\n */\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the attestation request.\n */\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the full delegated attestation request.\n */\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi attestation request.\n */\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi attestation request.\n */\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n}\n\n/**\n * @dev A struct representing the arguments of the revocation request.\n */\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/**\n * @dev A struct representing the full arguments of the revocation request.\n */\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the arguments of the full delegated revocation request.\n */\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    EIP712Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n}\n\n/**\n * @dev A struct representing the full arguments of the multi revocation request.\n */\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/**\n * @dev A struct representing the full arguments of the delegated multi revocation request.\n */\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    EIP712Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n}\n\n/**\n * @title EAS - Ethereum Attestation Service interface.\n */\ninterface IEAS {\n    /**\n     * @dev Emitted when an attestation has been made.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param uid The UID the revoked attestation.\n     * @param schema The UID of the schema.\n     */\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when an attestation has been revoked.\n     *\n     * @param recipient The recipient of the attestation.\n     * @param attester The attesting account.\n     * @param schema The UID of the schema.\n     * @param uid The UID the revoked attestation.\n     */\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schema);\n\n    /**\n     * @dev Emitted when a data has been timestamped.\n     *\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Emitted when a data has been revoked.\n     *\n     * @param revoker The address of the revoker.\n     * @param data The data.\n     * @param timestamp The timestamp.\n     */\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /**\n     * @dev Returns the address of the global schema registry.\n     *\n     * @return The address of the global schema registry.\n     */\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /**\n     * @dev Attests to a specific schema.\n     *\n     * @param request The arguments of the attestation request.\n     *\n     * Example:\n     *\n     * attest({\n     *     schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n     *     data: {\n     *         recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     *         data: \"0xF00D\",\n     *         value: 0\n     *     }\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to a specific schema via the provided EIP712 signature.\n     *\n     * @param delegatedRequest The arguments of the delegated attestation request.\n     *\n     * Example:\n     *\n     * attestByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e'\n     * })\n     *\n     * @return The UID of the new attestation.\n     */\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /**\n     * @dev Attests to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttest([{\n     *     schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 1000\n     *     },\n     *     {\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: true,\n     *         refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n     *         data: '0x12345678',\n     *         value: 0\n     *     },\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Attests to multiple schemas using via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiAttestByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n     *         expirationTime: 1673891048,\n     *         revocable: true,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x1234',\n     *         value: 0\n     *     },\n     *     {\n     *         recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n     *         expirationTime: 0,\n     *         revocable: false,\n     *         refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n     *         data: '0x00',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4'\n     * }])\n     *\n     * @return The UIDs of the new attestations.\n     */\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema.\n     *\n     * Example:\n     *\n     * revoke({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n     *         value: 0\n     *     }\n     * })\n     *\n     * @param request The arguments of the revocation request.\n     */\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /**\n     * @dev Revokes an existing attestation to a specific schema via the provided EIP712 signature.\n     *\n     * Example:\n     *\n     * revokeByDelegation({\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: {\n     *         uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n     *         value: 0\n     *     },\n     *     signature: {\n     *         v: 27,\n     *         r: '0xb593...7142',\n     *         s: '0x0f5b...2cce'\n     *     },\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * })\n     *\n     * @param delegatedRequest The arguments of the delegated revocation request.\n     */\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas.\n     *\n     * @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     * schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevoke([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     * },\n     * {\n     *     schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n     *     data: [{\n     *         uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n     *         value: 0\n     *     },\n     * }])\n     */\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /**\n     * @dev Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n     *\n     * @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests should be\n     * grouped by distinct schema ids to benefit from the best batching optimization.\n     *\n     * Example:\n     *\n     * multiRevokeByDelegation([{\n     *     schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n     *     data: [{\n     *         uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n     *         value: 1000\n     *     },\n     *     {\n     *         uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n     *         value: 0\n     *     }],\n     *     signatures: [{\n     *         v: 28,\n     *         r: '0x148c...b25b',\n     *         s: '0x5a72...be22'\n     *     },\n     *     {\n     *         v: 28,\n     *         r: '0x487s...67bb',\n     *         s: '0x12ad...2366'\n     *     }],\n     *     revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992'\n     * }])\n     *\n     */\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /**\n     * @dev Timestamps the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Timestamps the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /**\n     * @dev Revokes the specified multiple bytes32 data.\n     *\n     * @param data The data to timestamp.\n     *\n     * @return The timestamp the data was revoked with.\n     */\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /**\n     * @dev Returns an existing attestation by UID.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return The attestation data members.\n     */\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /**\n     * @dev Checks whether an attestation exists.\n     *\n     * @param uid The UID of the attestation to retrieve.\n     *\n     * @return Whether an attestation exists.\n     */\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /**\n     * @dev Returns the timestamp that the specified data was timestamped with.\n     *\n     * @param data The data to query.\n     *\n     * @return The timestamp the data was timestamped with.\n     */\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"
    },
    "contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/**\n * @title A struct representing a record for a submitted schema.\n */\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/**\n * @title The global schema registry interface.\n */\ninterface ISchemaRegistry {\n    /**\n     * @dev Emitted when a new schema has been registered\n     *\n     * @param uid The schema UID.\n     * @param registerer The address of the account used to register the schema.\n     */\n    event Registered(bytes32 indexed uid, address registerer);\n\n    /**\n     * @dev Submits and reserves a new schema\n     *\n     * @param schema The schema data schema.\n     * @param resolver An optional schema resolver.\n     * @param revocable Whether the schema allows revocations explicitly.\n     *\n     * @return The UID of the new schema.\n     */\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /**\n     * @dev Returns an existing schema by UID\n     *\n     * @param uid The UID of the schema to retrieve.\n     *\n     * @return The schema data members.\n     */\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { Attestation } from \"../Common.sol\";\n\n/**\n * @title The interface of an optional schema resolver.\n */\ninterface ISchemaResolver {\n    /**\n     * @dev Returns whether the resolver supports ETH transfers.\n     */\n    function isPayable() external pure returns (bool);\n\n    /**\n     * @dev Processes an attestation and verifies whether it's valid.\n     *\n     * @param attestation The new attestation.\n     *\n     * @return Whether the attestation is valid.\n     */\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes multiple attestations and verifies whether they are valid.\n     *\n     * @param attestations The new attestations.\n     * @param values Explicit ETH amounts which were sent with each attestation.\n     *\n     * @return Whether all the attestations are valid.\n     */\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /**\n     * @dev Processes an attestation revocation and verifies if it can be revoked.\n     *\n     * @param attestation The existing attestation to be revoked.\n     *\n     * @return Whether the attestation can be revoked.\n     */\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /**\n     * @dev Processes revocation of multiple attestation and verifies they can be revoked.\n     *\n     * @param attestations The existing attestations to be revoked.\n     * @param values Explicit ETH amounts which were sent with each revocation.\n     *\n     * @return Whether the attestations can be revoked.\n     */\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/tests/eip712/proxy/TestEIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { IEAS } from \"../../../IEAS.sol\";\nimport { EIP712Proxy, DelegatedProxyAttestationRequest, DelegatedProxyRevocationRequest } from \"../../../eip712/proxy/EIP712Proxy.sol\";\n\ncontract TestEIP712Proxy is EIP712Proxy {\n    constructor(IEAS eas, string memory name) EIP712Proxy(eas, name) {}\n\n    function verifyAttest(DelegatedProxyAttestationRequest memory request) external {\n        _verifyAttest(request);\n    }\n\n    function verifyRevoke(DelegatedProxyRevocationRequest memory request) external {\n        _verifyRevoke(request);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}